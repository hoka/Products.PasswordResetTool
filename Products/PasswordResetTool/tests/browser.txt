Functional tests for PasswordResetTool
======================================

First of all we have to be aware that Plone by default implements two distinct
policies regarding member registration.

  A. Users can provide their own password (and can optionally be send an
     e-mail with login credentials) and can login directly without validation
     of the e-mail address.

  B. A password is generated for the users (and an e-mail with login
     credentials is sent automaticly).

This policy can enabled or disabled in the 'validate_email' property on the
Plone Site object. By default validate_email is disabled and the first policy
applies.

Another aspect we have to take into account is the fact that Plone by default
allows anonymous visitors to register themselves AND portal administrators can
add users using User Administration in the Plone Configuration. Currently the
two policies apply for both of these use cases.
     
The PasswordResetTool has to respect both policies and both use cases and never
send e-mails with login credentials. The desired result after installing
PasswordResetTool is as follows:


  1. Anonymous user registers himself

    A. Users can provide their own password during registration, but don't have
       the option to send credentials by e-mail and can login directly

    B. Users can't provide a password but are send an e-mail with a link to set
       their password. (so that the e-mail address used, is validated).

  2. Site Admin registers a user

    A. The site admin can provide a password and is not allowed to send the
       credentials via e-mail and will have to provide the users with the password
       by oral communication or snail mail.

    B. The site admin can't provide a password and the system will send an
       e-mail with a link to set the password (e-mail address validated).


1A. User joins and resets his password
--------------------------------------

This test will outline the typical usage of the PasswordResetTool.
Here, we will from a browser's perspective:

  - Join the portal
  - Log in
  - Log out again
  - Forget our password (this is where PasswordResetTool comes in)
  - Read the e-mail that contains the URL we visit to reset our password
  - Reset our password
  - Log in with our new password

For this test, we're going to use ``zope.testbrowser``.  This package
is included with Zope 3.2 which is included in Zope 2.9, and it has
excellent documentation in its ``README.txt``.

Note that our usage of testbrowser is unusual and inconsistent, mostly
because Plone forms have inconsistencies and because testbrowser makes
assumptions that are not true for Plone forms.

  >>> from Products.PasswordResetTool.tests.utils import Browser
  >>> browser = Browser()
  >>> browser.open('http://nohost/plone/')

Let's join as a member.  Plone's default settings will let the user
type in his initial password:

  >>> browser.getLink('Join').click()
  >>> browser.url
  'http://nohost/plone/join_form'

  >>> browser.getControl(name='username').value = 'jsmith'
  >>> browser.getControl(name='email').value = 'jsmith@example.com'
  >>> browser.getControl(name='password').value = 'secret'
  >>> browser.getControl(name='password_confirm').value = 'secret'
  >>> browser.getControl(name='form.button.Register').click()
  
  >>> "You have been registered" in browser.contents
  True
  
We are not logged in yet at this point.  Let's try to log in:

  >>> browser.getLink('Log in').click()
  >>> browser.url
  'http://nohost/plone/login_form'
  >>> browser.getControl(name='__ac_name').value = 'jsmith'
  >>> browser.getControl(name='__ac_password').value = 'secret'
  >>> browser.getControl(name='submit').click()
  >>> "You are now logged in" in browser.contents
  True

Log out again:

  >>> browser.getLink('Log out').click()
  >>> "You are now logged out" in browser.contents
  True

Now it is time to forget our password and click the ``Forgot your
password`` in the portlet:

  >>> browser.open('http://nohost/plone')
  >>> browser.getLink('Forgot your password?').click()
  >>> browser.url
  'http://nohost/plone/mail_password_form'
  >>> form = browser.getForm(name='mail_password')
  >>> form.getControl(name='userid').value = 'jsmith'
  >>> form.submit()

As part of our test setup, we replaced the original MailHost with our
own version.  Our version doesn't mail messages, it just collects them
in a list called ``messages``:

  >>> mailhost = self.portal.MailHost
  >>> mailhost.messages #doctest: +ELLIPSIS
  [<email.Message.Message instance ...>]
  >>> msg = str(mailhost.messages[-1])

Now that we have the message, we want to look at its contents, and
then we extract the address that lets us reset our password:

  >>> "To: jsmith@example.com" in msg
  True
  >>> please_visit_text = "please visit this address:"
  >>> please_visit_text in msg
  True
  >>> url_index = msg.index(please_visit_text) + len(please_visit_text)
  >>> address = msg[url_index:].split()[0]
  >>> address #doctest: +ELLIPSIS
  'http://nohost/plone/passwordreset/...'

Now that we have the address, we will reset our password:

  >>> browser.open(address)
  >>> "Set your password" in browser.contents
  True

  >>> form = browser.getForm(name='pwreset_action')
  >>> form.getControl(name='userid').value = 'jsmith'
  >>> form.getControl(name='password').value = 'secretion'
  >>> form.getControl(name='password2').value = 'secretion'
  >>> form.submit()

We can now login using our new password:

  >>> "Your password has been set successfully." in browser.contents
  True
  >>> browser.url
  'http://nohost/plone/pwreset_finish'
  >>> browser.getControl(name='__ac_name').value = 'jsmith'
  >>> browser.getControl(name='__ac_password').value = 'secretion'
  >>> browser.getControl(name='submit').click()

We should be logged in now:

  >>> "You are now logged in" in browser.contents
  True

Log out again:

  >>> browser.getLink('Log out').click()
  >>> "You are now logged out" in browser.contents
  True


1B. User joins with e-mail validation enabled and forgets password
------------------------------------------------------------------

  -
  -
  -
  -
  -
  -
  -
  -



2A. Administrator registers user
--------------------------------

  - Join the portal
  - Log in as the portal owner
  - Browse to User and Group Management
  - Click the add user button
  - Fill in the account information (with send email checked)
  - Read the e-mail that contains the URL we visit to reset our password
  - Log out

  - Forget our password (this is where PasswordResetTool comes in)
  - Reset our password
  - Log in with our new password


First, we want to login as the portal owner:

  >>> from Products.PloneTestCase import PloneTestCase as PTC

  >>> browser.getLink('Log in').click()
  >>> browser.getControl(name='__ac_name').value = PTC.portal_owner
  >>> browser.getControl(name='__ac_password').value = PTC.default_password
  >>> browser.getControl(name='submit').click()
  >>> "You are now logged in" in browser.contents
  True

We navigate to the Users Overview page directly and register a new
user:

  >>> browser.open('http://nohost/plone/prefs_users_overview')


2B. Administrator adds user with email validation enabled
---------------------------------------------------------

  -
  -
  -
  -
  -
  -
  -

